@startuml VoiceParroting

class VoiceParrotingService
{
- recorder : VoiceRecorder
- player : VoicePlayer
+ IsRunning : bool
+ IsRecorderRunning : bool
+ IsPlayerRunnning : bool
+ RecorderProgress : double
+ PlayerProgress : double
+ samplingFreq : int
+ recTime : int
+ DelayInMilli : int
- sharedBuffer : VoiceDataSharedBuffer
+ VoiceParrotingService(delay : int)
- UpdateSharedBufferBinding() : void
+ TrySetDelay(delay : double) : bool
+ TryStart() : bool
- Invoke() : void
+ Break() : bool
}

VoiceParrotingService --> VoiceDataSharedBuffer
VoiceRecorder -up-> VoiceDataSharedBuffer
VoicePlayer -up-> VoiceDataSharedBuffer
class VoiceDataSharedBuffer 
{
+ Lock : object <<readonly>>
- dataType : Type
- dataObject : object
+ Set<T>(dataObject : T) : void
+ Get<T>() : T
}

VoiceParrotingService --> VoiceRecorder
VoiceParrotingService --> VoicePlayer
class VoiceRecorder
{
+ IsRunning : bool
+ CanStart() : bool
+ CanFinalize() : bool
- samplingFreq : int
- recTime : int
- sharedBufferSize : int
+ VoiceRecorder(samplingFreq : int, recTime : int)
+ Initialize() : void
+ BindSharedBuffer(sharedBuffer : VoiceDataSharedBuffer) : void
+ Start() : void
+ End() : void
+ GetProgress() : double
}

class VoicePlayer
{
+ IsRunning : bool
+ CanStart() : bool
+ CanFinalize() : bool
- samplingFreq : int
- recTime : int
- sharedBufferSize : int
+ VoicePlayer(samplingFreq : int, recTime : int)
+ Initialize() : void
+ BindSharedBuffer(sharedBuffer : VoiceDataSharedBuffer) : void
+ Start() : void
+ End() : void
+ GetProgress() : double
}

@enduml
